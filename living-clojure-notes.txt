
most items are not errata, but rather "language clarifications"
-----------------------------------------------------------------------------

p8, (cons 5 nil) -> (5)
  nil is doing double-duty here, since it can be both an element in the seq and
  signal the end of the seq.  Ambiguous.

p11 commas in maps
  commas should not be used in maps, since they will be ignored even if in the
  wrong location:  
    { :missing-first-value, :missing-2nd-value,
      :has-a-value "hello" }
  better to just use each pair on separate line. Compiler will always catch
  off-by-one errors (one-half of a key-value pair is missing), which leaves an
  odd number of items inside the curly braces.  And, fortunately, it seems to
  never happen that two key-value pairs are missing an item (which would leave
  an even number of items so that the compiler couldn't detect the error).

p12 didn't cover (:missing {:a 1 :b 2})  ; still -> nil ???

p16. No, the parens make it list.  The quote just escapes the "normal" meaning
of lists:  function call.

p17, end: "prefixed by a slash (/)" -> "We could also explicitly reference the
symbol by specifying the namespace first and using a slash to separate them:
user/developer

p18, para 2: "line user/developer, " -> "expression user/developer"

p21, para2: 
  -> "Namespaces are used to organize and control access to vars."
  -> "..def or defn, it was created in the "user" namespace, which is the default
  namespace for the REPL."
  -> ".. by using an "ns" expression.  Any vars created after
  calling ns will be created in the new namespace.

p22, para2: 
  -> "libs (libraries)"  "are composed of names & symbols wrapped up in a namespace.
  To access the contents of a lib, we can use the word 'require' in one of
  3 common ways:"

  para 3: "auto-required" -> "loaded automatically"
  para 4: "..second way to use require is with.."
  para 5: "..within the ns expression, using the keyword form :require and wrapping
  the namespace and its alias in a vector:"
  (Note that, for the first 2 forms, the argument to require needs to be escaped with a
  single-quote. This is not necessary in the third form where require is nested within the ns
  expression).


p24 #2: "vector of foods1 is converted to a set and..."
p24 #3: "vector of foods2 is converted to a set and..."
p27: didn't cover (true? 1), (true? "true"), (true :true)
  must be exactly true, false, or nil for true? false? nil? fns.
p28, nil? tests is a value is nil
p29, line 1: collection -> collections
p29, para4: "not_ _seq" -> (not (seq ...))
p30, para 2: avoid "(not (empty? x))" don't understand reason
p31, para 7: "logical true" -> "logically true"
p33,34: if-let, when-let: find *result* of expression, then eval
  (Since they are rarely used, I would leave them out of the early chapters)
p36 "#  ()" spacing typo
p38: (def surprise2 (comp oh-my toggle-grow))
  there is little point in creating something a new function, using it once, and then throwing it
  away.  it is easier to just use it directly
p39: don't understand the purpose of [[color size]]

p44: (defn alice-is [cum-result word-list]
        if (empty? word-list)
          cum-result
          (let [new-result          (str cum-result (first word-list))
                words-remaining     (rest word-list) ]
          )

            (alice-is new-result words-remaining)))

p44, #5: "..we concat the string "Alice is " to the first element of 'in', then.."
p45, top: 
  (features that are built-in to Clojure are called "special forms", which are different from the
  functions, vars, symbols, & values that you can create as a user.  'def', 'if', and 'let' are
  examples of special forms.  'loop' & 'recur' are also special forms)
p45, alice-is: redo example & fix output
p46, para 3, 
  "..function itself.." -> "Note that the function itself can be used as an implicit recursion
  target, as we have done here.  If the recursion point is not the first expression of the function,
  the 'loop' form must be used to explicitely specify the recursion point.
p46, para 4, -> "..one data structure into another and reducing (or eliminating) the use of state in functions."
p48, both middle examples, ":mouse" missing colon

p47/49:  Map/Reduce the Ultimate (both?)
p53, para 2: -> "..Clojure expressions, now you can.."
p53, end: "code shaping" -> "data shaping"
p57, "We will then use swap! to increment our counter many times in a dotimes loop, which is
intended solely for its side-effects (dotimes always returns nil). In our case, the side-effect is
to increment our counter atom."
p58, #1, "..for namming a value that is not used.."
p65, #1, "the change-error function"
p69, para 3, "..that currently dominant languages.."
p70, para 1, "new and dot special forms"
p76, para 1, "When we call the.."

-----------------------------------------------------------------------------
examples diving deeper (Clojure Confidential)

p32:
(some #{nil} [nil nil nil]) -> nil
(some #{false} [false false false]) -> nil
  ->  (let [is-nil?   (mapv nil?   [nil   nil   nil])
            is-false? (mapv false? [false false false]) ]
        (some is-false?))

p50, 2nd 1/2: examples for keep-if, drop-if
