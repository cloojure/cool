-----------------------------------------------------------------------------
Online resources:
  http://www.postgresql.org/docs/9.4/static/index.html
  http://www.postgresqltutorial.com/
  http://www.pgadmin.org/
-----------------------------------------------------------------------------

shell:
  pg_ctl    initdb  -D /var/postgresql    ; init postgres global storage area
  postgres          -D /var/postgresql    ; start the postgres server (blocking)
    ^-Use this for Clojure Cookbook testing

  createuser <user-name>    ; user-name aka "rolename" in docs
  dropeuser  <user-name>
  createdb   <db-name>      ; or "createdb -O <owner-name> <db-name> "
  dropedb    <db-name>

psql <dbname>   - start psql, connect to <dbname> (defaults to unix username)
  \l[+]                         - list databases (+ => extra info)
  \du[+]                        - list users/roles (+ => extra info)
  \dn[+]                        - list schemas (+ => extra info)
  \d                            - list tables, views, sequences
  \d  [<name>]                  - describe tables, views, sequences
  \c   <dbname>                 - connect to <dbname>
  \h                            - help
  \q                            - quit (or CRTL-D)
  CREATE USER <name>;       - synonym for "CREATE ROLE <name> LOGIN;"
  CREATE USER <name> SUPERUSER LOGIN;
  DROP   USER <name>;

  CREATE DATABASE <db-name>;
  CREATE DATABASE <db-name> OWNER <user-name>;    - user-name aka "rolename" in docs
  DROP   DATABASE <db-name>;

  -----------------------------------------------------------------------------
  Notes:
    Although SQL is case insensitive, the commands "CREATE USER..." & "CREATE ROLE..."
    appear to be *postgres* commands (i.e. NOT SQL), and therefore DO SEEM to be case
    sensitive.
  -----------------------------------------------------------------------------


Notes:
  Since typing "psql" at the command defaults to "psql <unix-username>", it will fail if
  a database named <unix-username> doesn't exist.  To prevent this, it may be convenient
  to make an empty, default db for each user even if it is never used.

******************************************************************************************
> psql  --host somehost.amazonaws.com \
        --port <someport> \
        --username <someuser> \
        my-db-name

  => \d                 - describe all tables
  => \d people          - describe table people
  => select id,job_id,latest_file,hostname from people;  
                        - print 4 cols from people

  - print rows for the 5 largest ids
  => select id,job_id,latest_file,hostname 
        from people order by id desc limit 5;

  => select max(id) from people;     - print largest value in id column
  => select id,job_id,latest_file,hostname 
        from people where  id=1132;
                        - print just the row specified

  - Using a sub-query in the where clause instead of the 2-step method above
  => select id,job_id,latest_file,hostname from people 
        where id=(select max(id) from people);

  => begin;             - begin transaction block
  =>   update people set hostname='dummy-host' where id=1132;  - make change to db
  => [ commit;          - either commit the change to the db
  => or
  =>   rollback; ]      - or rollback (discard) the change


Tables:
--------------------------------------------------------------------------------
  CREATE TABLE weather (
      city            varchar(80),
      temp_lo         int,           -- low temperature
      temp_hi         int,           -- high temperature
      prcp            real,          -- precipitation
      date            date
  );

  CREATE TABLE cities (
      name            varchar(80),
      location        point
  );

  DROP TABLE tablename;   ***** permanent deletion! *****

  INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
      VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');

  SELECT * FROM weather;                - star "*" means all columns
  SELECT city, temp_lo, temp_hi, prcp, date FROM weather;       - list col's wanted

  SELECT * FROM weather
    WHERE city = 'San Francisco' AND prcp > 0.0;

  SELECT * FROM weather
    ORDER BY city;
  SELECT * FROM weather
    ORDER BY city, temp_lo;

  SELECT DISTINCT city
    FROM weather;

  SELECT city, temp_lo, temp_hi, prcp, date, location
    FROM weather, cities
    WHERE weather.city = city.name;

  SELECT W1.city, W1.temp_lo AS low, W1.temp_hi AS high,
         W2.city, W2.temp_lo AS low, W2.temp_hi AS high
    FROM weather W1, weather W2
    WHERE W1.temp_lo < W2.temp_lo
    AND   W1.temp_hi > W2.temp_hi;

         city      | low | high |     city      | low | high
    ---------------+-----+------+---------------+-----+------
     San Francisco |  43 |   57 | San Francisco |  46 |   50
     Hayward       |  37 |   54 | San Francisco |  46 |   50

-----------------------------------------------------------------------------
alan=# \dt test
       List of relations
 Schema | Name | Type  | Owner
--------+------+-------+-------
 public | test | table | alan
(1 row)

alan=# select * from test;
 a
---
 1
 2
 3
(3 rows)

alan=# SELECT a,
alan-#        CASE WHEN a=1 THEN 'one'
alan-#             WHEN a=2 THEN 'two'
alan-#             ELSE 'other'
alan-#        END
alan-#     FROM test;
 a | case
---+-------
 1 | one
 2 | two
 3 | other
(3 rows)

alan=# SELECT a,
       (CASE WHEN a=1 THEN 'one'
             WHEN a=2 THEN 'two'
             ELSE 'other'
        END) as result
    FROM test;
 a | result
---+--------
 1 | one
 2 | two
 3 | other
(3 rows)


-----------------------------------------------------------------------------
Installation on Ubuntu:
  If necessary, configure latest apt-get sources from http://www.postgresql.org/download/linux/ubuntu/

  sudo apt-get install -y postgresql
  sudo apt-get install -y pgAdmin3
  sudo service postgresql status
    service --status-all
    service --help
    sudo service postgresql restart       - if needed
    sudo service postgresql stop          - if needed
    sudo service postgresql start         - if needed


Try to connect:
  > psql
  psql: FATAL:  role "alan" does not exist  

User "alan" or DB "alan" don't exist.  Become user "postgres", then create user & DB "alan"
  sudo su postgres
    createuser alan       - old way: psql --command="CREATE ROLE alan LOGIN SUPERUSER"
    createdb   alan
  exit      - logout of user "postgres"

Now login using psql
  psql
    \l+         - list databases (the 'plus' sign => implies full listing)
    \dnS+       - list schemas (S => system objects
    \dt+        - list tables (or \dtS+)

To use pgadmin3 (aka pgAdmin3)
  Either configure passwords for users, or add this line to "/etc/postgresql/9.4/main/pg_hba.conf"
    "local all all trust"
    "host all all 127.0.0.1/32 trust"
  to enable all local socket users:

-----------------------------------------------------------------------------
Connecting from another host:

psql --host=52.24.170.46 --username=ubuntu

-----------------------------------------------------------------------------
System info:
  \x    - toggle output format
  select * from pg_settings;
  \timing [on|off]

  select reltuples from pg_class where relname = 'my_table_name';        - fast table rows estimate

  select pg_size_pretty( pg_relation_size(          'my_table_name' ));     - table only size
  select pg_size_pretty( pg_total_relation_size(    'my_table_name' ));     - table + extras size
  select pg_size_pretty( pg_database_size(          'my_db_name'    ));     - DB size

-----------------------------------------------------------------------------
Useful definitions:

  create view local_extensions as 
    select name, default_version, installed_version, left(comment,30) as comment 
    from pg_available_extensions 
    where installed_version is not null 
    order by name;
  select * from local_extensions;

-----------------------------------------------------------------------------
oracle_fdw notes:
  sudo apt install -y libaio-dev        - maybe needed?

-----------------------------------------------------------------------------
Ubuntu files: 
  /etc/init.d/postgresql

  /etc/postgresql/9.4/main/environment
  /etc/postgresql/9.4/main/pg_ctl.conf
  /etc/postgresql/9.4/main/pg_hba.conf
  /etc/postgresql/9.4/main/pg_ident.conf
  /etc/postgresql/9.4/main/postgresql.conf      - set port=5432 if needed
  /etc/postgresql/9.4/main/start.conf

  /usr/share/postgresql/9.4/extension
  /usr/share/postgresql/9.4/man/man1
  /usr/share/postgresql/9.4/man/man7
  /usr/share/postgresql/9.4/man
  /usr/share/postgresql/9.4/tsearch_data
  /usr/share/postgresql/9.4/timezonesets

  /usr/lib/postgresql/9.4/bin/
  /usr/lib/postgresql/9.4/lib/

  /etc/postgresql-common
  /usr/share/postgresql-common/

  /var/lib/postgresql
  /var/lib/postgresql/9.4
  /var/lib/postgresql/9.4/main
  /var/lib/postgresql/9.4/main/pg_dynshmem
  /var/lib/postgresql/9.4/main/pg_notify
  /var/lib/postgresql/9.4/main/global
  /var/lib/postgresql/9.4/main/pg_serial
  /var/lib/postgresql/9.4/main/base
  /var/lib/postgresql/9.4/main/pg_snapshots
  /var/lib/postgresql/9.4/main/pg_tblspc
  /var/lib/postgresql/9.4/main/pg_twophase
  /var/lib/postgresql/9.4/main/pg_stat
  /var/lib/postgresql/9.4/main/pg_xlog/archive_status
  /var/lib/postgresql/9.4/main/pg_xlog
  /var/lib/postgresql/9.4/main/pg_replslot
  /var/lib/postgresql/9.4/main/pg_clog
  /var/lib/postgresql/9.4/main/pg_logical/mappings
  /var/lib/postgresql/9.4/main/pg_logical/snapshots
  /var/lib/postgresql/9.4/main/pg_logical
  /var/lib/postgresql/9.4/main/pg_stat_tmp
  /var/lib/postgresql/9.4/main/pg_subtrans
  /var/lib/postgresql/9.4/main/pg_multixact/offsets
  /var/lib/postgresql/9.4/main/pg_multixact/members
  /var/lib/postgresql/9.4/main/pg_multixact

  /var/log/postgresql

-----------------------------------------------------------------------------
Fedora Files 
  /var/lib/pgsql
  /var/lib/pgsql/9.2/data/pg_hba.conf

-----------------------------------------------------------------------------
Mac OSX Files 
  /usr/local/bin/psql
  /usr/local/Cellar/postgresql/9.3.3/bin/psql
  /usr/local/var/postgres/pg_hba.conf
  /usr/local/var/postgres/server.log

  https://www.codefellows.org/blog/three-battle-tested-ways-to-install-postgresql
  https://robots.thoughtbot.com/starting-and-stopping-background-services-with-homebrew

  when install 1st time see:
    mkdir -p ~/Library/LaunchAgents
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
  then:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
        -> set auto-start (use 'unload' to disable auto-start)
        unload      - disable auto-start
        stop        - stop service
        start       - start service ("restart" does not exist)

-----------------------------------------------------------------------------
Fedora notes:  
  See:  https://wiki.postgresql.org/wiki/YUM_Installation
        https://wiki.postgresql.org/wiki/First_steps

  Change auth method from "ident" to "trust" in pg_hba.conf (/var/lib/psql/...)
    -- I had 2 of them!
    -- looks like /var/lib/pgsql/9.3 is the correct one (fedora 20, postgres 9.3, 2014/7)
    -- log file:  /var/lib/pgsql/9.3/data/pg_log/postgresql-Fri.log   (etc)

  After creation/init:
  > sudo su - postgres
  > psql                                        -- implicitly uses DB=postgres
  postgres=# CREATE USER alan SUPERUSER LOGIN;
  postgres=# \q                                 -- exit
  > exit                                        -- logout from user postgres
  > psql -d postgres                            -- must specify an existing DB
  postgres=# \l                                 -- list databases
  postgres=# \da                                -- list schema info
  postgres=# \d                                 -- list tables
  postgres=# postgres=# CREATE DATABASE alan;            -- easiest to create dummy DB for all users.
  postgres=# \l                                 -- DB alan now exists
  postgres=# \q                                 -- quit

