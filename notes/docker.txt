Docker Notes - Fedora 20 (2014-10-21)
  sudo apt install -y docker.io
  sudo systemctl start docker       # start docker
  sudo systemctl enable docker      # enable docker to start at boot

  # alias dk="sudo docker" ; no longer needed
  docker --help                         # general help
  docker <cmd> --help                   # help for <cmd>

  docker run -it ubuntu /bin/bash       # test if working (-i=interactive  -t=tty)
    ^p ^q   # detach w/o exit
  docker attach         <id>            # attach to a running container

  Commands:
    docker --version            # normal
    docker version              # more detailed
    docker info                 # very detailed
    docker run hello-world      # basic health check

    docker run <flags>  <image>     <cmd & args>     # run a job
    docker run -it      ubuntu    /bin/bash
    docker run -itd     ubuntu                      # start container in background (--detach)

                        <cont name>     <image>
    docker run -itd     --name=mycont   ubuntu      # start container in background (--detach)

          ports =>  <out>:<in>    <image>
    docker run    -p 4000:80    friendlyhello       # --publish <list> (not "port")
    docker run -d -p 4000:80    friendlyhello       # --detach, returns container <sha> 
    docker container stop <sha>                     # stop container <sha>

    # after `docker login` user/pass
                 <image>        <user>/<repo>:<tag>
    docker tag friendlyhello  cloojure/get-started:part2    # tag image
    docker push cloojure/get-started:part2                  # push image to docker hub
    docker run  -p 4000:80  <user>/<repo>:<tag>             # run image on any machine

    docker swarm init
    docker stack deploy -c docker-compose.yml getstartedlab
    docker service ls                                           # ls the service
    docker stack services  getstartedlab                        #   another way
    docker service   ps getstartedlab_web                       # status on all tasks in a service
    docker container ps getstartedlab                           # status on all tasks in a stack
    docker stack rm getstartedlab                               # take down the stack
    docker swarm leave --force                                  # take down the swarm

    docker-machine create --driver virtualbox myvm1             # create 1 vm...
    docker-machine create --driver virtualbox myvm2             # ...and another
    docker-machine ls                                           # list vm's
    docker-machine ssh myvm1 \              # vvv e.g.  192.168.99.100  (*** don't use a port here! ***)
        "docker swarm init --advertise-addr <myvm1 ip>"
    docker-machine ssh myvm1 "docker node ls"

    docker-machine ssh myvm1 "docker swarm leave --force"       # for leader
    docker-machine ssh myvm2 "docker swarm leave"               # for others

    docker-machine env myvm1                                    # & cut/paste `eval` cmd


---------------------------------------------------------------------------------------------------
                             <nw name>
    docker network ls                                   # list all networks (also 'list')
    docker network inspect    bridge                    # show details on "bridge" network
    docker network disconnect bridge mycont             # remove container from network

    docker network create                   my-bridge-nw    # default:  --driver=bridge
    docker network create --driver=bridge   my-bridge-nw    # create your own "bridge" network
    docker network inspect                  my-bridge-nw    # inspect network

    docker run -d --net=my-bridge-nw --name db training/postgres
    docker network connect my-bridge-nw web        # attach web container to m-b-network

    docker run -itd --name container1 busybox           # create 2 containers
    docker run -itd --name container2 busybox
    docker network create -d bridge --subnet 172.25.0.0/16  isolated_nw         # create network
    docker network connect isolated_nw container2       # connect c2 to network
    docker network inspect isolated_nw                  # verify

    docker attach container4                            # attach to a running container
    ping -w4 c5                                     # ping another container on the network
    docker network disconnect isolated_nw container5    # disconnect container from network
    docker network rm isolated_nw                       # remove a network

    docker image ls                                     # list images
    docker images                                       # list images
    docker run docker-whale                             # run image; it then exits
    docker build --tag=perf-1 .                         # build ./Dockerfile and tag "perf-1"

    docker container ls                                 # list images
    docker container ls --all
    docker container ls -aq                             # all, quiet
    docker container --help


    docker ps                           # list running containers
    docker ps -a                        # list ALL     containers

    docker logs         <id>            # cat logs
    docker logs -f      <id>            # "tail -f" logs
    docker top          <id>
    docker inspect      <id>            # detailed json output

    ID=$(dkru -d <image> <prog> <args>)        # daemon job
    docker stop         <id>
    docker start        <id>
    docker restart      <id>
    docker kill         <id>

    docker pause        <id>
    docker unpause      <id>

    docker rm           <id>                    # must be stopped to remove

Examples:
  docker run -it   ubuntu /bin/bash          # interactive shell
     ^p ^q                                   # detach from a running container
  docker run -itd  ubuntu /bin/bash          # interactive shell (detached)
  docker attach <ident>

  docker network ls
  docker network inspect bridge

----------------------------------------------------------------------------------------
Docker Machine Install (Ubuntu 15.10) from:  docs.docker.com/machine/install-machine/
  cd
  sudo su       # become root
    curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine 
    chmod +x /usr/local/bin/docker-machine
    exit        # stop being root

----------------------------------------------------------------------------------------
Docker Machine commands
  docker-machine create --driver virtualbox host1
  docker-machine ls
  docker-machine inspect host1
  docker-machine inspect --format "{{.Driver.IPAddress}}" host1
  docker-machine ip host1
  docker-machine upgrade host3

  docker-machine ssh host1
  docker-machine ssh host1 "echo spot > dog.file"
  docker-machine scp host1:dog.file host2:dog.file
  docker-machine ssh host2 "cat dog.file"

  docker-machine stop host2
  docker-machine kill host3
  docker-machine start host2
  docker-machine rm host1 host2 host3

  docker-machine env machine1
  eval $(docker-machine env machine1)   # set machine1 as the active machine
    docker-machine active                           # show active machine
    docker-machine ls                               # list all machines (see col "active")
    docker pull dockerinaction/ch12_painted         # pull image into active machine

----------------------------------------------------------------------------------------
Dock Swarm commands

docker-machine create --driver virtualbox local
eval "$(docker-machine env local)"

token=$( docker run --rm swarm create )
echo $token

docker-machine create \
  --driver virtualbox \
  --swarm \
  --swarm-discovery token://${token} \
  --swarm-master \
  machine0-manager

docker-machine create \
  --driver virtualbox \
  --swarm \
  --swarm-discovery token://${token} \
  machine1

docker-machine create \
  --driver virtualbox \
  --swarm \
  --swarm-discovery token://${token} \
  machine2

# show current state:
docker-machine ls
  #=> NAME               ACTIVE   DRIVER       STATE     URL                         SWARM                       DOCKER    ERRORS
  #=> local              *        virtualbox   Running   tcp://192.168.99.100:2376                               v1.10.3   
  #=> machine0-manager   -        virtualbox   Running   tcp://192.168.99.101:2376   machine0-manager (master)   v1.10.3   
  #=> machine1           -        virtualbox   Running   tcp://192.168.99.102:2376   machine0-manager            v1.10.3   
  #=> machine2           -        virtualbox   Running   tcp://192.168.99.103:2376   machine0-manager            v1.10.3   

eval "$(docker-machine env --swarm machine0-manager)"       # config to use the swarm cluster
docker info     # reports on whole swarm, not just one docker daemon

# run a command on the swarm
docker run -t -d --name hello-swarm \
  dockerinaction/ch12_painted \
  Hello Swarm
docker logs hello-swarm         # see result

docker ps -a -f name=hello-swarm    # look at process status (ps); filter for "hello-swarm" container

docker pull dockerinaction/ch12_painted     # ensure each machine pulls the image

# cleanup the contains
docker-compose -f flock.yml kill
docker-compose -f flock.yml rm â€“vf

# labelled machine creation
docker-machine create -d virtualbox \
  --swarm --swarm-discovery token://${token}  --engine-label size=small  little-machine
docker-machine create -d virtualbox \
  --swarm --swarm-discovery token://${token}  --engine-label size=xxl    big-machine

# run a constrained container
docker run -d  -e constraint:size==xxl  -m 4G --cpu-shares 512 postgres

# cleanup the machines
docker-machine rm -f local machine0-manager machine1 machine2 

# Disable docker-machine, so local docker daemon can be used again
docker-machine-disable      # alias
  alias docker-machine-disable=' DOCKER_MACHINE_IP="" ; DOCKER_TLS_VERIFY="" ; DOCKER_HOST="" ; DOCKER_CERT_PATH="" ; DOCKER_MACHINE_NAME="" '

-----------------------------------------------------------------------------
docker 1.12 testing  2016-6-26

  Follow these instructions!  http://blog.mantika.io/docker-1.12-swarm/

  Remember:
    # alias dkm=docker-machine
  verify
    docker      --version       ;=> Docker version 1.12.0-rc2, build 906eacd
    # dkm     --version       ;=> docker-machine version 0.8.0-rc1, build fffa6c9
  Created 3 test machines using docker-machine
    dkm create --driver virtualbox      manager1 / worker1 / worker2

  dkm ls
  docker swarm init --listen-addr $(dkm ip manager1):2377
  docker node ls
  dkm ssh worker1 "docker swarm join $(dkm ip manager1):2377"
  dkm ssh worker2 "docker swarm join $(dkm ip manager1):2377"
  dkm ssh manager1 "docker node ls"
    ID                           NAME      MEMBERSHIP  STATUS  AVAILABILITY  MANAGER STATUS
    197f4kk3pwq742oyqre8omuzk *  manager1  Accepted    Ready   Active        Leader
    818its2forlhhgn2mhir77cux    worker1   Accepted    Ready   Active        
    8chzzm3y04zbgiagbuiigc9j1    worker2   Accepted    Ready   Active        

  docker service create --replicas 1 --name helloworld alpine ping docker.com
  docker service ls
  docker service inspect --pretty helloworld
  docker service tasks  helloworld
  docker service scale helloworld=5
  docker service ls
  docker service inspect --pretty helloworld
  docker service rm helloworld
  
  docker service create --replicas 3 --name redis --update-delay 10s --update-parallelism 1 redis:3.0.6
  docker service inspect redis --pretty
  docker service update --image redis:3.0.7 redis
  docker service inspect redis --pretty
  docker service tasks redis

  docker node ls
  docker service tasks redis
  docker node update --availability drain worker1
  docker node inspect --pretty worker1
  docker node update --availability active worker1
  docker node inspect --pretty worker1


  From https://docs.docker.com/engine/userguide/networking/get-started-overlay/
       https://docs.docker.com/engine/userguide/networking/dockernetworks/

    ifconfig                # host network display
    cat /etc/hosts          # host network config
    docker network create --driver bridge isolated_nw
    docker network create --driver overlay --subnet=10.0.9.0/24 my-net   # multi-host network
    docker network ls

    docker network inspect bridge
    docker network inspect <NAME>
    docker run --net=<NAME> ...

