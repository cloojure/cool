-----------------------------------------------------------------------------
cheatsheet:
  select version();
  select * from generate_series(1,10)
  select * from generate_series( '2014-01-01'::timestamp, '2014-12-01'::timestamp, '42 days' );
  select x as first_of_the_month from 
    generate_series('2014-01-01'::timestamp,'2014-12-01'::timestamp,'1 month') as f(x);   
  select '1 week' + now() as a_week_from_now;
  select now() at time zone 'PDT' as cali_time;
  select now() - now() at time zone 'PDT' as cali_diff;  => 8 hours
  select distinct sku,
      sum(price)  OVER (PARTITION BY sku) as revenue,
      count(1)    OVER (PARTITION BY sku) as sales_count,
      sum(price)  OVER (PARTITION by 0)   as sales_total
    from invoice_items
      where date_part('month',created_at) = 9;

-----------------------------------------------------------------------------
Online resources:
  http://www.postgresql.org/docs/9.4/static/index.html
  http://www.postgresqltutorial.com/
  http://www.pgadmin.org/
-----------------------------------------------------------------------------

shell:
  pg_ctl    initdb  -D /var/postgresql    ; init postgres global storage area
  postgres          -D /var/postgresql    ; start the postgres server (blocking)
    ^-Use this for Clojure Cookbook testing

  ; setup commands
  sudo --user=postgres  createuser <user>    ; user-name aka "rolename" in docs
  sudo --user=postgres  createdb   <user>  --owner=<user> 
  sudo --user=postgres  psql -c "alter role <user> superuser"

  dropuser  <user-name>
  dropedb    <db-name>

psql <dbname>   - start psql, connect to <dbname> (defaults to unix username)
  \l[+]                         - list databases (+ => extra info)
  \d                            - list tables, views, sequences
  \dt[+]                        - list tables (+ => extra info)
  \du[+]                        - list users/roles (+ => extra info)
  \dg[+]                        - list roles
  \dn[+]                        - list schemas (+ => extra info)
  \d  [<name>]                  - describe tables, views, sequences
  \c   <dbname>                 - connect to <dbname>
  \conninfo                     - connection info
  \h                            - help or `\?`
  \q                            - quit (or CRTL-D)

  select version();             - version of postgres
  show config-file;             - location of config file
  show data-directory;          - location of data directory
  show log-directory;           - location of log directory (may be relative to data dir)



  CREATE USER <name>;       - synonym for "CREATE ROLE <name> LOGIN;"
  CREATE USER <name> SUPERUSER LOGIN;
  DROP   USER <name>;

  CREATE DATABASE <db-name>;
  CREATE DATABASE <db-name> OWNER <user-name>;    - user-name aka "rolename" in docs
  DROP   DATABASE <db-name>;

  CREATE SCHEMA  <schema-name>;
  CREATE SCHEMA  <schema-name> OWNER <user-name>;    - user-name aka "rolename" in docs
  DROP   SCHEMA  <schema-name>;

    set schema to 'xxx' 
      set search_path to xxx
      set search_path to xxx, public

  alter role <user> superuser;              - give all privs
  alter role joe password  'secret';        - change password for user 'joe'

  -----------------------------------------------------------------------------
  Notes:
    Although SQL is case insensitive, the commands "CREATE USER..." & "CREATE ROLE..."
    appear to be *postgres* commands (i.e. NOT SQL), and therefore DO SEEM to be case
    sensitive.
  -----------------------------------------------------------------------------


Notes:
  Since typing "psql" at the command defaults to "psql <unix-username>", it will fail if
  a database named <unix-username> doesn't exist.  To prevent this, it may be convenient
  to make an empty, default db for each user even if it is never used.

******************************************************************************************
> psql  --host somehost.amazonaws.com \
        --port <someport> \
        --username <someuser> \
        my-db-name

  => \d                 - describe all tables
  => \d people          - describe table people
  => select id,job_id,latest_file,hostname from people;  
                        - print 4 cols from people

  - print rows for the 5 largest ids
  => select id,job_id,latest_file,hostname 
        from people order by id desc limit 5;

  => select max(id) from people;     - print largest value in id column
  => select id,job_id,latest_file,hostname 
        from people where  id=1132;
                        - print just the row specified

  - Using a sub-query in the where clause instead of the 2-step method above
  => select id,job_id,latest_file,hostname from people 
        where id=(select max(id) from people);

  => begin;             - begin transaction block
  =>   update people set hostname='dummy-host' where id=1132;  - make change to db
  => [ commit;          - either commit the change to the db
  => or
  =>   rollback; ]      - or rollback (discard) the change


Tables:
--------------------------------------------------------------------------------
  CREATE TABLE weather (
      city            varchar(80),
      temp_lo         int,           -- low temperature
      temp_hi         int,           -- high temperature
      prcp            real,          -- precipitation
      date            date
  );

  CREATE TABLE cities (
      name            varchar(80),
      location        point
  );

  DROP TABLE tablename;   ***** permanent deletion! *****

  INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
      VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');

  SELECT * FROM weather;                                        ; star "*" means all columns
  SELECT city, temp_lo, temp_hi, prcp, date FROM weather;       ; list col's wanted
  table weather limit 5;                                        ; same as "select * from weather limit 5"

  SELECT * FROM weather
    WHERE city = 'San Francisco' AND prcp > 0.0;

  SELECT * FROM weather
    ORDER BY city;
  SELECT * FROM weather
    ORDER BY city, temp_lo;

  SELECT DISTINCT city
    FROM weather;

  SELECT city, temp_lo, temp_hi, prcp, date, location
    FROM weather, cities
    WHERE weather.city = city.name;

  SELECT W1.city, W1.temp_lo AS low, W1.temp_hi AS high,
         W2.city, W2.temp_lo AS low, W2.temp_hi AS high
    FROM weather W1, weather W2
    WHERE W1.temp_lo < W2.temp_lo
    AND   W1.temp_hi > W2.temp_hi;

         city      | low | high |     city      | low | high
    ---------------+-----+------+---------------+-----+------
     San Francisco |  43 |   57 | San Francisco |  46 |   50
     Hayward       |  37 |   54 | San Francisco |  46 |   50

-----------------------------------------------------------------------------
alan=# \dt test
       List of relations
 Schema | Name | Type  | Owner
--------+------+-------+-------
 public | test | table | alan
(1 row)

alan=# select * from test;
 a
---
 1
 2
 3
(3 rows)

alan=# SELECT a,
alan-#        CASE WHEN a=1 THEN 'one'
alan-#             WHEN a=2 THEN 'two'
alan-#             ELSE 'other'
alan-#        END
alan-#     FROM test;
 a | case
---+-------
 1 | one
 2 | two
 3 | other
(3 rows)

alan=# SELECT a,
       (CASE WHEN a=1 THEN 'one'
             WHEN a=2 THEN 'two'
             ELSE 'other'
        END) as result
    FROM test;
 a | result
---+--------
 1 | one
 2 | two
 3 | other
(3 rows)

-----------------------------------------------------------------------------
Installation on Ubuntu:
  If necessary, configure latest apt-get sources from http://www.postgresql.org/download/linux/ubuntu/

  sudo apt-get install -y postgresql
  sudo apt-get install -y pgAdmin3

New way:
  sudo systemctl  status    postgresql
  sudo systemctl  start     postgresql
  sudo systemctl  stop      postgresql
  sudo systemctl  restart   postgresql
  sudo systemctl  enable    postgresql
  sudo systemctl  disable   postgresql
  sudo systemctl  show      postgresql

  sudo systemctl  halt
  sudo systemctl  poweroff
  sudo systemctl  reboot
  sudo systemctl  suspend
  sudo systemctl  hibernate
  sudo systemctl  --help
  sudo systemctl  --system

Old way:
  sudo service postgresql status
  sudu service --status-all
  sudu service --help
  sudo service postgresql restart       - if needed
  sudo service postgresql stop          - if needed
  sudo service postgresql start         - if needed


Try to connect:
  > psql
  psql: FATAL:  role "alan" does not exist  

User "alan" or DB "alan" don't exist.  Become user "postgres", then create user & DB "alan"

  - execute as the user "postgres"
  sudo --user=postgres  createuser  alan     - old way: psql --command="CREATE ROLE alan LOGIN SUPERUSER"
  sudo --user=postgres  createdb    alan
  sudo --user=postgres  createdb    datapig

Now login using psql
  psql
    \l+         - list databases (the 'plus' sign => implies full listing)
    \dnS+       - list schemas (S => system objects
    \dt+        - list tables (or \dtS+)

To use pgadmin3 (aka pgAdmin3)
  Either configure passwords for users, or add this line to /etc/postgresql/9.4/main/pg_hba.conf
    "local  all all               trust"
    "host   all all 127.0.0.1/32  trust"
  to enable all local socket users, uncomment this line from /etc/postgresql/9.5/main/postgresql.conf
    #listen_addresses = 'localhost'     # what IP address(es) to listen on;
  make sure port is 5432

-----------------------------------------------------------------------------
Connecting from another host:

psql --host=52.24.170.46 --username=ubuntu

-----------------------------------------------------------------------------
System info:
  \x    - toggle output format
  select * from pg_settings;
  \timing [on|off]

  select reltuples from pg_class where relname = 'my_table_name';        - fast table rows estimate

  select pg_size_pretty( pg_relation_size(          'my_table_name' ));     - table only size
  select pg_size_pretty( pg_total_relation_size(    'my_table_name' ));     - table + extras size
  select pg_size_pretty( pg_database_size(          'my_db_name'    ));     - DB size

-----------------------------------------------------------------------------
Useful definitions:

  create view local_extensions as 
    select name, default_version, installed_version, left(comment,30) as comment 
    from pg_available_extensions 
    where installed_version is not null 
    order by name;
  select * from local_extensions;

-----------------------------------------------------------------------------
avoid join reordering (preempt optimizer)

  SET join_collapse_limit = 1;

array of LIKEs

  SELECT sum(product_cost) FROM t_test
    WHERE  product_code LIKE '%123%'
        OR product_code LIKE '%234%'
        OR product_code LIKE '%345%'
        OR product_code LIKE '%456%'
        OR product_code LIKE '%567%';
  SELECT sum(product_cost) FROM t_test WHERE product_code LIKE ANY( array['%123%', '%234%', '%345%', '%456%', '%567%']);
  SELECT sum(product_cost) FROM t_test WHERE product_code LIKE ANY(      ‘{%123%,%234%,%345%,%456%,%567%}’ );

-----------------------------------------------------------------------------
EnterpriseDB (EDB) files: 
  /opt/PostgreSQL/10/data/postgresql.conf
  /opt/PostgreSQL/10/data/pg_hba.conf
  /opt/PostgreSQL/10/data/pg_ident.conf
  /opt/PostgreSQL/10/data/postgresql.auto.conf

-----------------------------------------------------------------------------
Ubuntu files: 
  /etc/init.d/postgresql

  /etc/postgresql/9.4/main/environment
  /etc/postgresql/9.4/main/pg_ctl.conf
  /etc/postgresql/9.4/main/pg_hba.conf
  /etc/postgresql/9.4/main/pg_ident.conf
  /etc/postgresql/9.4/main/postgresql.conf      - set port=5432 if needed
  /etc/postgresql/9.4/main/start.conf

  /usr/share/postgresql/9.4/extension
  /usr/share/postgresql/9.4/man/man1
  /usr/share/postgresql/9.4/man/man7
  /usr/share/postgresql/9.4/man
  /usr/share/postgresql/9.4/tsearch_data
  /usr/share/postgresql/9.4/timezonesets

  /usr/lib/postgresql/9.4/bin/
  /usr/lib/postgresql/9.4/lib/

  /etc/postgresql-common
  /usr/share/postgresql-common/

  /var/lib/postgresql
  /var/lib/postgresql/9.4
  /var/lib/postgresql/9.4/main
  /var/lib/postgresql/9.4/main/pg_dynshmem
  /var/lib/postgresql/9.4/main/pg_notify
  /var/lib/postgresql/9.4/main/global
  /var/lib/postgresql/9.4/main/pg_serial
  /var/lib/postgresql/9.4/main/base
  /var/lib/postgresql/9.4/main/pg_snapshots
  /var/lib/postgresql/9.4/main/pg_tblspc
  /var/lib/postgresql/9.4/main/pg_twophase
  /var/lib/postgresql/9.4/main/pg_stat
  /var/lib/postgresql/9.4/main/pg_xlog/archive_status
  /var/lib/postgresql/9.4/main/pg_xlog
  /var/lib/postgresql/9.4/main/pg_replslot
  /var/lib/postgresql/9.4/main/pg_clog
  /var/lib/postgresql/9.4/main/pg_logical/mappings
  /var/lib/postgresql/9.4/main/pg_logical/snapshots
  /var/lib/postgresql/9.4/main/pg_logical
  /var/lib/postgresql/9.4/main/pg_stat_tmp
  /var/lib/postgresql/9.4/main/pg_subtrans
  /var/lib/postgresql/9.4/main/pg_multixact/offsets
  /var/lib/postgresql/9.4/main/pg_multixact/members
  /var/lib/postgresql/9.4/main/pg_multixact

  /var/log/postgresql

-----------------------------------------------------------------------------
Fedora Files 
  /var/lib/pgsql
  /var/lib/pgsql/9.2/data/pg_hba.conf

-----------------------------------------------------------------------------
Mac OSX Files 
  /usr/local/bin/psql
  /usr/local/Cellar/postgresql/9.3.3/bin/psql
  /usr/local/var/postgres/pg_hba.conf
  /usr/local/var/postgres/server.log

  https://www.codefellows.org/blog/three-battle-tested-ways-to-install-postgresql
  https://robots.thoughtbot.com/starting-and-stopping-background-services-with-homebrew

  when install 1st time see:
    mkdir -p ~/Library/LaunchAgents
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
  then:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
        -> set auto-start (use 'unload' to disable auto-start)
        unload      - disable auto-start
        stop        - stop service
        start       - start service ("restart" does not exist)

-----------------------------------------------------------------------------
EDB postgresql notes

from ~/cool/common.bash
  export PGDATA="/var/edb/postgresql"
  export EDB_HOME="/opt/PostgreSQL/10"          ; export PATH="${EDB_HOME}/bin:$PATH"

install notes:
  install dir:   /var/edb/postgresql   # owned by alan
  data dir       /var/edb/postgresql   # PGDATA in env - alan

  # EDB wants to run as a regular user (not root)
  pg_ctl init       # how to create RDBMS cluster (server stuff)

  result:
    Success. You can now start the database server using: 
      /opt/PostgreSQL/10/bin/pg_ctl -D /var/edb/postgresql -l logfile start
  before can start successfully, remove all old postgres installs
    sudo systemctl stop  postgresql
    sudo apt remove -y   postgresql
    sudo rm /tmp/.s*                # lockfile & socket

  # EDB wants to run as a regular user (not root)
  pg_ctl start/stop/restart    # run db (as reg user) from a terminal
    -l <logfile>               # or get log log msgs at terminal

  # EDB wants to run as a regular user (not root)
  # createuser alan    ; username aka "role" in docs (user 'alan' created during install)
  alan> createdb  <user> [ --owner=<user> ]   # still need this
  # psql -c "alter role <user> superuser"  # not needed since created during install

