# Global configuration (updates ~/.gitconfig)
git config --global user.name           "Joe User"          # set user name
git config --global user.email          joe@gmail.com       # set user name
git config --global core.editor         vim                 # set user editor preference
git config --global merge.tool          vimdiff             # set user merge tool
git config --global fetch.prune         1                   # auto prune deleted remote branches
git config --list                                           # view git settings

# Global git aliases
git config --global alias.co    checkout                # allow "git co"
git config --global alias.go    checkout                # allow "git go"
git config --global alias.s     status                  # allow "git s"
git config --global alias.ci    commit                  # allow "git ci" (check-in)
git config --global alias.unstage "reset HEAD --"       # allow "git unstage <file>"

# Create a repo in a dir
git init                        # Create the repo
git add .                       # Stage all current files for commit
git commit -m"<message>"        # Save the files with <message>

# Basic usage
git checkout    <branch>                        # move to a branch
git commit -am"<message>"                       # stage & commit in 1-step with <message>
git rm <file>                                   # delete <file>
git mv <name1> <name2>                          # rename from <name1> to <name2>

# Viewing logs
git log --oneline                               # view 1-line commit messages
git log --pretty=short                          # short format
git log -5                                      # view only last 5 commits
git log -p -2                                   # print diffs for last 2 commits
git log --since=2.weeks                         # limit time duration of listing
git log --after=2014-04-15                      # limit start time of listing
git log --before=2014-04-15                     # linit end time of listing
gitk                                            # GUI history viewer
git log --oneline master...myBranch             # view only commits since myBranch
git log --oneline master...                     #   was created from master

# Discarding changes to a file
git checkout <branch>                           # move to <branch>
vim <file>                                      # make changes
git checkout -- <file>                          # discard changes to <file>
git reset --hard                                # discard changes to ALL files

# Viewing diffs
git diff --name-status <commit>                 # output like 'git status --brief'
git diff -w            <commit>                 # diff ignore all whitespace
git difftool --no-prompt                        # best way to invoke for 'vimdiff' 

# Tagging
git tag -a f-23-root -m"branch f-23 root"       # create annotated tag
git push origin <tag>                           # push <tag> to server origin
git push origin --tags                          # push ALL tags to server origin

# Branching
git branch                              # list local branches
git branch -r (or --remotes)            # list remote branches
git branch --all                        # list all branches (incl remote)
git branch      <branch>                # create branch from current location
git checkout -b <branch>                # create branch from current location & move there
git branch -d   <branch>                # delete branch
git push <remote> --delete <branch>     # delete <branch> on server <remote>

--------------------------------------------------------------------------------
# Checkout a remote branch for the first time, creating a local tracking branch
git checkout --track <remote>/<branch>   # e.g. "origin/feat-x" -> local "feat-x" branch
--------------------------------------------------------------------------------
# Normal branch creation:  starting on "feat-23"
git checkout master                         # new branch is based here
git pull                                    # ensure we are at newest commit
  <edit files, decide want a new branch>
git tag -a feat-23a-root -m'feat-23a-root'  # Mark root of feature branch
git checkout -b feat-23a                    # create new branch "feat-23" & move to it
git commit -m"Starting feat-23a"            # save edits to branch feat-23
git push --set-upstream origin feat-23a     # push new branch to origin
# if want tags on origin:
    git push origin feat-23a-root           # push tag to server origin
      git push origin --tags                #   alternate: push ALL tags to server origin
# if feat-23a doesn't work out, repeat from beginning with feat-23b
--------------------------------------------------------------------------------
# Ready to commit? Create a squashed pull request from new HEAD on master
git checkout master                         # move to master
git pull                                    # ensure at latest version
git checkout -b feat-23a-rc1                # create Release Candidate #1 branch and go there
git merge --squash feat-23a                 # squash all of feat-23a into 1 delta
git commit --all -m'feat-23a-rc1'           # save squashed commits on rc1 branch
git push --set-upstream origin feat-23a-rc1 # save new branch to origin 

# When finished:
  git branch -d myFeat                  # deleted now-useless feature branch
--------------------------------------------------------------------------------

# Working with remote repos
git remote -v                               # list all remotes (verbose)
git remote add    <remote> <remote-URL>     # add remote <repo-URL> as <short-name>
git remote rm     <remote>                  # remove <short-name> reference to remote
git remote show   <remote>                  # show info about remote <short-name> and branches

git clone user@company.com:project.git          # checkout project from "origin" remote
git fetch origin                                # copy everything from origin (no merging)
git push --set-upstream origin <branch>         # 1st time pushing new <branch>

old:
  git push <remote> <branch-name>               # push <branch-name> to <remote>
  git push <remote> <local-name>:<remote-name>  # push <local-name> to <remote>/<remote-name>
  git branch --set-upstream-to=origin/<branch> <branch>   # old way 
old:
  git checkout -b <branch> <remote/branch>      # create <branch> from <remote/branch>, 
                                                    then move to it


# Fetching/Merging on a branch
  1. git checkout <branch>              # move to <branch>
  either:
    A1. git fetch <remote>              # copy everything from <remote>
    A2. git merge <remote/branch>       # do a local merge from <remote/branch>
  lr:
    B1. git pull  <origin>              # copy <remote/branch> AND merge in 1 step

# Merge with --squash:  All commits on a feature branch can be compressed into a single
# commit on master, discarding all history on the feature branch.  
  git checkout master                   # destination of merge
  git pull                              # ensure up-to-date with origin
  git merge --squash myFeat             # merge all myFeat commits into 1 commit on master
  git branch -d myFeat                  # deleted now-useless feature branch

--------------------------------------------------------------------------------
Install GIT - most recent version

Git Core PPA repository is maintain by team on launchpad. Execute following commands one
by one in a sequence to add ppa in our system and install Latest git version.

$ sudo add-apt-repository ppa:git-core/ppa
$ sudo apt-get update
$ sudo apt-get install git  

Check GIT Version

To check current version installed of Git use following command.

$ git --version
git version 2.1.1
